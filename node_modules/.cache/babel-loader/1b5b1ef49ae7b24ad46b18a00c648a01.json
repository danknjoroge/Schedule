{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN_SUCCESS, LOGIN_FAILED, REGISTER_CUSER_SUCCESS, REGISTER_CUSER_FAILED, LOGOUT_SUCCESS } from \"../actions/type\";\nexport const create_studentuser = _ref => {\n  let {\n    username,\n    email,\n    password,\n    password2\n  } = _ref;\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      email,\n      password,\n      password2\n    });\n    axios.post('https://neapi.herokuapp.com/api/signup/student/', body, config).then(res => {\n      dispatch({\n        type: REGISTER_CUSER_SUCCESS,\n        payload: res.data\n      });\n      console.log(res.data);\n    }).catch(err => {\n      dispatch({\n        type: REGISTER_CUSER_FAILED\n      });\n      console.log(err.response.data);\n    });\n  };\n};\nexport const login = _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      password\n    });\n    axios.post('https://neapi.herokuapp.com/api/login/', body, config).then(response => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: response.data\n      });\n    }).catch(err => {\n      dispatch({\n        type: LOGIN_FAILED\n      });\n    });\n  };\n};\nexport const logout = () => (dispatch, getState) => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  axios.post('https://neapi.herokuapp.com/api/logout/', null, config).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    console.log(err.response.data);\n  });\n};","map":{"version":3,"sources":["/home/moringa/Documents/tif/vow/ui/Class-Schedule-React/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAILED","REGISTER_CUSER_SUCCESS","REGISTER_CUSER_FAILED","LOGOUT_SUCCESS","create_studentuser","username","email","password","password2","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","console","log","catch","err","response","login","logout","getState","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { \n     LOGIN_SUCCESS, LOGIN_FAILED, REGISTER_CUSER_SUCCESS, REGISTER_CUSER_FAILED, LOGOUT_SUCCESS\n} from \"../actions/type\"\n\n\n    \n\nexport const create_studentuser=({username, email,password, password2})=>(dispatch)=>{\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    const body=JSON.stringify({username, email, password, password2})\n\n    axios.post('https://neapi.herokuapp.com/api/signup/student/', body, config)\n    .then(res =>{\n        dispatch({\n            type:REGISTER_CUSER_SUCCESS,\n            payload:res.data\n        })\n        console.log(res.data)\n    }).catch(err =>{\n        dispatch({\n            type:REGISTER_CUSER_FAILED\n        })\n        console.log(err.response.data)\n    })\n}\n\n\n\nexport const login=({username, password})=>(dispatch)=>{\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    const body=JSON.stringify({username, password})\n\n    axios.post('https://neapi.herokuapp.com/api/login/', body, config)\n    .then(response =>{\n        dispatch({\n            type:LOGIN_SUCCESS,\n            payload:response.data\n        })\n    }).catch(err =>{\n        dispatch({\n            type:LOGIN_FAILED\n        })\n    })\n\n}\nexport const logout=()=>(dispatch, getState)=>{\n    const token=getState().auth.token\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n\n    if(token){\n        config.headers['Authorization']= `Token ${token}`\n    }\n    axios.post('https://neapi.herokuapp.com/api/logout/', null, config)\n    .then(res =>{\n        dispatch({\n            type:LOGOUT_SUCCESS\n        })\n    }).catch(err =>{\n        console.log(err.response.data)\n    })\n}\n"]},"metadata":{},"sourceType":"module"}